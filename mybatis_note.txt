mybatis

character 1
	1.三层架构
		界面层：和用户打交道（jsp，servlet，servlet）
		业务逻辑层：接收数据，计算逻辑
		数据访问层（持久层）：访问数据库，对数据库进行

		三层对应的包
			界面层：controller
			业务逻辑层：service
			数据访问层：dao
		三层对应的框架
			界面层：servlet------springmvc
			业务逻辑层：service类------spring
			数据访问层：dao类-----mybatis
	
	2.框架
		框架是一个模板（Framework）
			1.已经规定好了一些条款和内容
			2.可以加入自己的东西
			3.定义好了一些可用的功能
			4.是一个半成品的软件，基础功能是可以重复使用的
		框架的特点
			不能做所有事情
			针对某个领域有效（mybatis对数据库有效）
			框架是写好功能的软件

	3.mybatis能做什么
		提供了访问数据库的基本功能。持久层的框架。
		一个框架。一个SQL mapping framework for java
			1.SQL mapping sql映射
				数据库表中的一行数据映射为一个java对像
			2.data access object（dao）数据访问
				对数据库的增删改查
		
		功能：	
			创建 Connection，Statement，ResultSet的能力，不用开发者创建了
			提供了执行sql的能力
			提供了循环sql，把sql结果转为list集合的能力
			提供关闭资源的能力
		
		开发者需要做：
			提供sql语句

			开发者提供sql语句，mybatis执行，开发人员得到list集合或java对象
		
		mybatis是一个sql映射框架，一个增强的jdbc，只需要写好sql即可。不必关心资源的创建和销毁。重复劳动不需要做

主要类的介绍
    Resources：mybatis中的一个类，负责读取主配置文件
         InputStream in= Resources.getResourceAsStream("mybatis.xml");

    SqlSessionFactoryBuilder:创建工厂对象
        SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();

    【重要】SqlSessionFactory：重量级对象（创建这个对象耗时长，使用资源多）
        在整个项目中有一个这个对象就够用了。
        对象本身是一个接口。接口的实现类:DefaultSqlSessionFactory
        作用：
            SqlSession sqlSession=factory.openSession();
            通过openSession方法获得一个sqlSession对象。

            openSession方法说明：
                openSession（）：无参，获取非自动提交事物的SqlSession对象
                openSession（true）：获取自动提交事物的SqlSession对象
                openSession（false）：获取非自动提交事物的SqlSession对象

    SqlSession：
        是个接口，定义了操作数据库的方法：selectOne（），selectList（），insert（），update（），delete（），commit(),rollback()
        实现类：DefaultSqlSession
        使用要求：
            不是线程安全的，需要在方法内部使用，在执行sql语句之前，使用openSession()获取SqlSession对象。
            在执行完sql语句后需要关闭它。sqlSession.close();这样能保证使用是线程安全的

深入理解参数
    执行sql：insert into student values(#{id},#{name},#{email},#{age})里面需要有数据，数据来源于哪里
        数据来源于程序中组织的student对象，把数据从代码部分传递到文件部分。
        怎么把这些参数传到文件中，mybatis可以怎么用这些数据
    传入参数：从java代码中，把数据传入到mapper文件的sql语句中。

    1.parameterType：写在mapper文件中的一个数据，表示dao接口中方法参数的数据类型
        ps. public Student selectStudentById(Integer id) 想知道id是Integer数据类型的，
        需要通过parameterType告诉mybatis，查询时这个参数是个整型值。
    2.简单类型
         一个简单类型的参数：mybatis把java的基本类型和string都叫简单类型
         mapper文件获取简单类型的一个参数的值，使用 #{任意字符}
    3.多个参数-使用@Param命名参数
        接口 public List<Student> selectMulitParam(String name,Integer age)
        使用@Param（"参数名"） String name
            public List<Student> selectMulitParam(@Param("myname") String name,@Param("myage") Integer age)
        mapper文件
            <select>
                select * from student where name=#{myname} or age=#{myage}
            </select>
    4. #和$的区别
        #:告诉mybatis使用实际的参数值代替。并使用prepareStatement对象执行sql语句，#{。。。}代替sql中的？
        $:能用#的地方都可以用#. $做的是连接和替换。使用Statement把sql语句和$()的内容连接起来
        $使用替换，没有使用？替代。相当于sql语句的字符串拼接。statement比prepareStatement低。且会由sql注入的问题
            用户可能会获取敏感数据或者删除数据库
        $可以替换表名或者列名，能确定数据是安全的也可以使用

        1.#使用？在sql语句中占位的，使用prepareStatement对象执行sql语句，效率高
        2.#可以避免sql注入
        3.$不使用占位符，使用字符串连接的方式，使用Statement执行sql。

输出结果
    mybatis执行sql之后得到java对象

    1.resultType：
        结果类型，指sql语句执行完之后数据转换为的java对象 java类型是任意的
        类型的值：1.类型的全限定名称【建议使用这个java.lang.Integer】    2.别名

        处理方式：
            1.mybatis执行sql语句，mybatis执行无参数构造方法，创建对象
            2.mybatis把ResultSet指定列值赋给同名属性

            <select id="selectMultiObject" resultType="org.example.domain.Student">
                    select id,name,email,age from student where name=#{paramName} or age=#{paramAge}
            </select>

        定义自定义类型的别名：
            1.在mybatis主配置文件中定义，使用<typeAlias>定义
            2.可以在resultType使用

    2.resultMap：结果映射
        用来指定列名和java对象属性的对应关系

        1.自定义列和属性的关系（不想遵循同名规则）
        2.列名和属性名不同时一定需要使用resultMap

动态sql
    sql语句是变化的，可以根据条件获取到不同的sql语句。主要是where的部分发生变化

    实现使用的是mybatis提供的标签<if> <where> <foreach>
        <if>判断条件
            语法：<if test="判断java对象的属性值">
                    部分sql语句
                  </if>
        <where>标签
            同于包含多个if的，当多个if有一个成立时，where标签会自动增加一个where关键字。并去掉if中多余的and/or
        <foreach>
            循环java中的数组，list集合的。主要用在sql的in语句中

            学生id是 1001，1002，1003的三个学生
            select * from student in (1001,1002,1003)

            语法：<foreach collection="" item="" open="" close="" separator="">

                  </foreach>

                  collectiom:表示接口中的方法参数的类型，数组使用array，list集合使用list
                  item：自定义的表示数组或集合成员的变量
                  open：循环开始时的字符
                  close：循环结束时的字符
                  separator：集合成员之间的分隔符
        <sql>复用sql语句
            先定义在使用